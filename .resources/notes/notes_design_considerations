// Design considerations


// "BUMPING" request element sizes (header, body ... etc)

This technique implemented in (curl/lib/http.c), sets an average size
to a specific element, then increment the size by a `delta` only if needed
while checking that it doesn't exceed a pre-specified limit

Headers can vary significantly between requests. Allocating the maximum possible size for every request wastes memory

This efficiency is crucial in high-performance environments where resources like memory are valuable.

Security : Incrementally "bumping" the size allows the program to check for oversized headers as they are received. This way, it can stop processing and respond with an error as soon as the header exceeds the acceptable limit.

Protocol Compliance: Different clients and servers might have different limits based on their capacities or the needs of their applications. By handling headers dynamically, software can be more flexible and adapt to various conditions and requirements.

In most real-world scenarios, headers don't come close to reaching the maximum size. By dynamically managing header sizes, systems use resources proportional to actual needs, not theoretical limits.

// Use enums for request types

// http requests types
typedef enum {
  HTTPREQ_GET,
  HTTPREQ_POST,
  HTTPREQ_POST_FORM, /* we make a difference internally */
  HTTPREQ_POST_MIME, /* we make a difference internally */
  HTTPREQ_PUT,
  HTTPREQ_HEAD
} Curl_HttpReq;
